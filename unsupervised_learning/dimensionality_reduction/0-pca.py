#!/usr/bin/env python3
"""Dimensionality Reduction:
   Applying PCA on dataset."""


import numpy as np

initial_data = np.array([[ -16.71379391,   3.25277063,  -3.21956297],
                         [ 16.22654311,  -0.7283969,   -0.88325252],
                         [ 15.05945199,   3.81948929,  -1.97153621],
                         [ -7.69814111,   5.49561088,  -4.34581561],
                         [ 14.25075197,   1.37060228,  -4.04817187],
                         [-16.66888233,  -3.77067823,   2.6264981 ],
                         [ 6.71765183,   0.18115089,  -1.91719288],
                         [ 10.20004065,  -0.84380128,   0.44754302],
                         [-16.93427229,   1.72241573,   0.9006236 ],
                         [-12.4100987,    0.75431367,  -0.36518129],
                         [-16.40464248,   1.98431953,   0.34907508],
                         [ -6.69439671,   1.30624703,  -2.77438892],
                         [ 10.84363895,   4.99826372,  -1.36502623],
                         [-17.2656016,    7.29822621,   0.63226953],
                         [  5.32413372,  -0.54822516,  -0.79075935],
                         [ -5.63240657,   1.50278876,  -0.27590797],
                         [ -7.63440366,   7.72788006,  -2.58344477],
                         [  4.3348786,   -2.14969035,   0.61262033],
                         [ -3.95417052,   4.22254889,  -0.14601319],
                         [ -6.59947069,  -1.00867621,   2.29551761],
                         [ -0.78942283,  -4.15454151,   5.87117533],
                         [ 13.62292856,   0.40038586,  -1.36043631],
                         [  0.03536684,  -5.85950737,  -1.86196569],
                         [-11.1841298,    5.20313078,   2.37753549],
                         [  9.62095425,  -1.17179699,  -4.97535412],
                         [  3.85296648,   3.55808,      3.65166717],
                         [  6.57934417,   4.87503426,   0.30243418],
                         [-16.17025935,   1.49358788,   1.0663259 ],
                         [ -4.33639793,   1.26186205,  -2.99149191],
                         [ -1.52947063,  -0.39342225,  -2.96475006],
                         [  9.80619496,   6.65483286,   0.07714817],
                         [ -2.45893463,  -4.89091813,  -0.6918453 ],
                         [  9.56282904,  -1.8002211,    2.06720323],
                         [  1.70293073,   7.68378254,   5.03581954],
                         [  9.58030378,  -6.97453776,   0.64558546],
                         [ -3.41279182, -10.07660784,  -0.39277019],
                         [ -2.74983634,  -6.25461193,  -2.65038235],
                         [  4.54987003,   1.28692201,  -2.40001675],
                         [ -1.81149682,   5.16735962,   1.4245976 ],
                         [ 13.97823555,  -4.39187437,   0.57600155],
                         [ 17.39107161,   3.26808567,   2.50429006],
                         [ -1.25835112,  -6.60720376,   3.24220508],
                         [  1.06405562,  -1.25980089,   4.06401644],
                         [ -3.44578711,  -5.21002054,  -4.20836152],
                         [-21.1181523,   -3.72353504,   1.6564066 ],
                         [ -6.56723647,  -4.31268383,   1.22783639],
                         [ 11.77670231,   0.67338386,   2.94885044],
                         [ -7.89417224,  -9.82300322,  -1.69743681],
                         [ 15.87543091,   0.3804009,    3.67627751],
                         [  7.38044431,  -1.58972122,   0.60154138]])

desired_output = np.real(initial_data)

new_row = np.array([15.0, 2.0, -5.0])

desired_output = np.vstack((desired_output, new_row))

def pca(X, var=0.95):
    """PCA performance on a dataset using Numpy.
       Returns: the weights matrix 'W'
       which maintains the specified fraction
       of the OG variance."""
    cov_matrix = np.cov(X, rowvar=False)

    # Perform eigenvalue decomposition on the covariance matrix
    eigvals, eigvecs = np.linalg.eig(cov_matrix)

    # Sort eigenvalues and eigenvectors in descending order
    sorted_indices = np.argsort(eigvals)[::-1]
    eigvals = eigvals[sorted_indices]
    eigvecs = eigvecs[:, sorted_indices]

    # Determine target variance:
    total_variance = np.sum(eigvals)
    target_variance = var * total_variance

    # Find min num of dimensions
    cumulative_variance = np.cumsum(eigvals)
    num_dimensions = np.argmax(cumulative_variance >= target_variance) + 1

    # Extract principle components
    W = eigvecs[:, :num_dimensions]

    print(desired_output)

    return W
